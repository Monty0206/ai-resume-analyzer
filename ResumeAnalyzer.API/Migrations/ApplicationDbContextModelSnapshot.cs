// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ResumeAnalyzer.API.Data;

#nullable disable

namespace ResumeAnalyzer.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ResumeAnalyzer.API.Models.Analysis", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AnalyzedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("AtsScore")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("CompletenessScore")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("FormattingScore")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("KeywordScore")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("OverallScore")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<Guid>("ResumeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StrengthsSummary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WeaknessesSummary")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AnalyzedDate")
                        .HasDatabaseName("IX_Analysis_AnalyzedDate");

                    b.HasIndex("ResumeId")
                        .IsUnique()
                        .HasDatabaseName("IX_Analysis_ResumeId");

                    b.ToTable("Analyses", (string)null);
                });

            modelBuilder.Entity("ResumeAnalyzer.API.Models.Recommendation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActionSteps")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("AnalysisId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Example")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ImpactScore")
                        .HasColumnType("int");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("AnalysisId")
                        .HasDatabaseName("IX_Recommendation_AnalysisId");

                    b.HasIndex("Category")
                        .HasDatabaseName("IX_Recommendation_Category");

                    b.HasIndex("Priority")
                        .HasDatabaseName("IX_Recommendation_Priority");

                    b.ToTable("Recommendations", (string)null);
                });

            modelBuilder.Entity("ResumeAnalyzer.API.Models.Resume", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ExtractedText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("FileContent")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Resume_Status");

                    b.HasIndex("UploadedDate")
                        .HasDatabaseName("IX_Resume_UploadedDate");

                    b.ToTable("Resumes", (string)null);
                });

            modelBuilder.Entity("ResumeAnalyzer.API.Models.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AnalysisId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ConfidenceLevel")
                        .HasColumnType("int");

                    b.Property<int>("Frequency")
                        .HasColumnType("int");

                    b.Property<bool>("IsInDemand")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("IsInDemand")
                        .HasDatabaseName("IX_Skill_IsInDemand");

                    b.HasIndex("AnalysisId", "Category")
                        .HasDatabaseName("IX_Skill_AnalysisId_Category");

                    b.ToTable("Skills", (string)null);
                });

            modelBuilder.Entity("ResumeAnalyzer.API.Models.Analysis", b =>
                {
                    b.HasOne("ResumeAnalyzer.API.Models.Resume", "Resume")
                        .WithOne("Analysis")
                        .HasForeignKey("ResumeAnalyzer.API.Models.Analysis", "ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resume");
                });

            modelBuilder.Entity("ResumeAnalyzer.API.Models.Recommendation", b =>
                {
                    b.HasOne("ResumeAnalyzer.API.Models.Analysis", "Analysis")
                        .WithMany("Recommendations")
                        .HasForeignKey("AnalysisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Analysis");
                });

            modelBuilder.Entity("ResumeAnalyzer.API.Models.Skill", b =>
                {
                    b.HasOne("ResumeAnalyzer.API.Models.Analysis", "Analysis")
                        .WithMany("DetectedSkills")
                        .HasForeignKey("AnalysisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Analysis");
                });

            modelBuilder.Entity("ResumeAnalyzer.API.Models.Analysis", b =>
                {
                    b.Navigation("DetectedSkills");

                    b.Navigation("Recommendations");
                });

            modelBuilder.Entity("ResumeAnalyzer.API.Models.Resume", b =>
                {
                    b.Navigation("Analysis");
                });
#pragma warning restore 612, 618
        }
    }
}
