using ResumeAnalyzer.API.Models;
using System.Text.RegularExpressions;

namespace ResumeAnalyzer.API.Services
{
    // Core service that analyzes resume content and generates scores
    // This is where all the scoring logic lives
    public class ResumeAnalysisService
    {
        private readonly ILogger<ResumeAnalysisService> _logger;
        private readonly AzureOpenAIService _openAIService;

        // List of technical skills to look for (can expand this easily)
        private readonly HashSet<string> _technicalSkills = new(StringComparer.OrdinalIgnoreCase)
        {
            "C#", "Java", "Python", "JavaScript", "TypeScript", "React", "Angular", "Vue",
            "Node.js", "ASP.NET", ".NET", "SQL", "MongoDB", "PostgreSQL", "MySQL",
            "Azure", "AWS", "GCP", "Docker", "Kubernetes", "CI/CD", "DevOps",
            "Git", "Agile", "Scrum", "REST API", "GraphQL", "Microservices",
            "HTML", "CSS", "Bootstrap", "Tailwind", "Entity Framework", "LINQ",
            "Machine Learning", "AI", "TensorFlow", "PowerShell", "Bash", "Linux"
        };

        // Skills that are hot in the market right now
        private readonly HashSet<string> _inDemandSkills = new(StringComparer.OrdinalIgnoreCase)
        {
            "Azure", "AWS", "Docker", "Kubernetes", "Terraform", "Ansible",
            "CI/CD", "DevOps", "Cloud", "Microservices", "Python", "PowerShell",
            "Linux", "Git", "Jenkins", "GitHub Actions", "Azure DevOps"
        };

        public ResumeAnalysisService(
            ILogger<ResumeAnalysisService> logger,
            AzureOpenAIService openAIService)
        {
            _logger = logger;
            _openAIService = openAIService;
        }

        // Main analysis method - this is the brain of the operation
        public async Task<Analysis> AnalyzeResumeAsync(string extractedText, string fileName)
        {
            _logger.LogInformation("Starting comprehensive analysis for: {FileName}", fileName);

            var analysis = new Analysis
            {
                Id = Guid.NewGuid()
            };

            // Calculate all the different scores
            analysis.AtsScore = CalculateAtsScore(extractedText);
            _logger.LogDebug("ATS Score: {Score}", analysis.AtsScore);

            analysis.CompletenessScore = CalculateCompletenessScore(extractedText);
            _logger.LogDebug("Completeness Score: {Score}", analysis.CompletenessScore);

            analysis.KeywordScore = CalculateKeywordScore(extractedText);
            _logger.LogDebug("Keyword Score: {Score}", analysis.KeywordScore);

            analysis.FormattingScore = CalculateFormattingScore(extractedText);
            _logger.LogDebug("Formatting Score: {Score}", analysis.FormattingScore);

            // Overall score is a weighted average
            analysis.OverallScore = CalculateOverallScore(analysis);
            _logger.LogDebug("Overall Score: {Score}", analysis.OverallScore);

            // Find all the skills mentioned
            analysis.DetectedSkills = DetectSkills(extractedText);
            _logger.LogDebug("Detected {Count} skills", analysis.DetectedSkills.Count);

            // Generate summaries
            analysis.StrengthsSummary = GenerateStrengthsSummary(analysis, extractedText);
            analysis.WeaknessesSummary = GenerateWeaknessesSummary(analysis, extractedText);

            // Get basic recommendations
            var recommendations = GenerateRecommendations(analysis, extractedText);
            
            // Enhance with GPT-4 if available
            try
            {
                _logger.LogInformation("Enhancing recommendations with GPT-4 AI...");
                var aiRecommendations = await _openAIService.GeneratePersonalizedRecommendationsAsync(
                    extractedText, 
                    analysis.OverallScore);
                
                if (!string.IsNullOrEmpty(aiRecommendations))
                {
                    // Add GPT-4 recommendations as top priority item
                    var aiRecommendation = new Recommendation
                    {
                        Id = Guid.NewGuid(),
                        Title = "ðŸ¤– AI-Powered Personalized Insights",
                        Description = "These recommendations are generated by GPT-4 AI specifically for your resume, taking into account your unique experience and the current job market.",
                        Category = "AI Insights",
                        Priority = "High",
                        ImpactScore = 30,
                        ActionSteps = aiRecommendations,
                        Example = "These insights are personalized to your specific resume content and career goals."
                    };
                    
                    recommendations.Insert(0, aiRecommendation);
                    
                    _logger.LogInformation("Successfully added GPT-4 enhanced recommendations");
                }
            }
            catch (Exception ex)
            {
                _logger.LogWarning(ex, "Could not generate GPT-4 recommendations, using standard recommendations only");
                // No big deal, just continue with standard recommendations
            }
            
            analysis.Recommendations = recommendations;
            _logger.LogDebug("Generated {Count} recommendations", analysis.Recommendations.Count);

            _logger.LogInformation("Analysis completed for: {FileName}. Overall Score: {Score}", 
                fileName, analysis.OverallScore);

            return await Task.FromResult(analysis);
        }

        // Check if resume is ATS-friendly
        // ATS = Applicant Tracking System used by most companies
        private decimal CalculateAtsScore(string text)
        {
            decimal score = 100;
            var lowerText = text.ToLower();

            // Deduct points for stuff that breaks ATS parsers
            if (Regex.IsMatch(text, @"\t{2,}") || text.Contains("|"))
                score -= 15; // Tables confuse ATS systems

            if (Regex.IsMatch(text, @"page\s+\d+", RegexOptions.IgnoreCase))
                score -= 5; // Page numbers in headers/footers

            if (Regex.IsMatch(text, @"[#$%&*@]"))
                score -= 10; // Special characters can mess things up

            // Check for standard section headers
            var hasExperience = lowerText.Contains("experience") || lowerText.Contains("work history");
            var hasEducation = lowerText.Contains("education");
            var hasSkills = lowerText.Contains("skills");

            if (!hasExperience) score -= 20;
            if (!hasEducation) score -= 15;
            if (!hasSkills) score -= 15;

            // Bonus for clean formatting
            if (!text.Contains("\t") && Regex.Matches(text, @"\n\n").Count >= 3)
                score += 10;

            return Math.Max(0, Math.Min(100, score));
        }

        // Check if resume has all the essential sections
        private decimal CalculateCompletenessScore(string text)
        {
            var lowerText = text.ToLower();
            decimal score = 0;

            // Contact info (20 points)
            if (Regex.IsMatch(text, @"\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b"))
                score += 10; // Has email
            if (Regex.IsMatch(text, @"\b\d{3}[-.]?\d{3}[-.]?\d{4}\b"))
                score += 10; // Has phone

            // Professional summary (15 points)
            if (lowerText.Contains("summary") || lowerText.Contains("objective") || lowerText.Contains("profile"))
                score += 15;

            // Work experience (25 points)
            if (lowerText.Contains("experience") || lowerText.Contains("work history") || lowerText.Contains("employment"))
                score += 25;

            // Education (20 points)
            if (lowerText.Contains("education") || lowerText.Contains("university") || lowerText.Contains("degree"))
                score += 20;

            // Skills (20 points)
            if (lowerText.Contains("skills") || lowerText.Contains("technical skills") || lowerText.Contains("competencies"))
                score += 20;

            // Bonus points
            if (lowerText.Contains("certification") || lowerText.Contains("certificate"))
                score += 5;
            if (lowerText.Contains("project") || lowerText.Contains("portfolio"))
                score += 5;

            return Math.Min(100, score);
        }

        // Check for relevant keywords and technical terms
        private decimal CalculateKeywordScore(string text)
        {
            var words = text.Split(new[] { ' ', '\n', '\r', '\t', ',', '.', ';' }, 
                StringSplitOptions.RemoveEmptyEntries);
            
            int technicalSkillCount = 0;
            int totalRelevantKeywords = 0;

            // Count how many technical skills are mentioned
            foreach (var skill in _technicalSkills)
            {
                if (text.Contains(skill, StringComparison.OrdinalIgnoreCase))
                {
                    technicalSkillCount++;
                    totalRelevantKeywords++;
                }
            }

            // Look for action verbs (shows strong experience descriptions)
            var actionVerbs = new[] { "developed", "created", "implemented", "designed", "led", 
                "managed", "optimized", "built", "deployed", "automated", "improved" };
            
            int actionVerbCount = actionVerbs.Count(verb => 
                text.Contains(verb, StringComparison.OrdinalIgnoreCase));

            decimal score = 0;
            
            // Technical skills (up to 50 points)
            score += Math.Min(50, technicalSkillCount * 5);

            // Action verbs (up to 30 points)
            score += Math.Min(30, actionVerbCount * 3);

            // Word count check (up to 20 points)
            // Sweet spot is 400-800 words for a resume
            int wordCount = words.Length;
            if (wordCount >= 400 && wordCount <= 800)
                score += 20;
            else if (wordCount >= 300 && wordCount <= 1000)
                score += 15;
            else if (wordCount >= 200 && wordCount <= 1200)
                score += 10;

            return Math.Min(100, score);
        }

        // Check formatting quality - structure and readability
        private decimal CalculateFormattingScore(string text)
        {
            decimal score = 100;

            var lines = text.Split('\n');
            var lowerText = text.ToLower();

            // Check for section headers
            var sectionHeaders = Regex.Matches(text, @"^[A-Z][A-Z\s]+$", RegexOptions.Multiline).Count;
            if (sectionHeaders < 3)
                score -= 20; // Not enough clear sections

            // Look for bullet points
            var bulletPoints = Regex.Matches(text, @"^\s*[â€¢\-\*]\s+", RegexOptions.Multiline).Count;
            if (bulletPoints < 5)
                score -= 15; // Should use more bullet points

            // Check spacing
            var paragraphBreaks = Regex.Matches(text, @"\n\n+").Count;
            if (paragraphBreaks < 3)
                score -= 10; // Too dense

            // Check for dates
            var datePatterns = Regex.Matches(text, @"\b(19|20)\d{2}\b").Count;
            if (datePatterns < 2)
                score -= 15; // Missing dates

            // Bonus for good length
            int lineCount = lines.Length;
            if (lineCount >= 30 && lineCount <= 60)
                score += 10;

            return Math.Max(0, Math.Min(100, score));
        }

        // Calculate overall score as weighted average
        // ATS is most important, then completeness, then keywords, then formatting
        private decimal CalculateOverallScore(Analysis analysis)
        {
            return (analysis.AtsScore * 0.35m) +
                   (analysis.CompletenessScore * 0.30m) +
                   (analysis.KeywordScore * 0.20m) +
                   (analysis.FormattingScore * 0.15m);
        }

        // Find and extract all technical skills from the resume
        private List<Skill> DetectSkills(string text)
        {
            var skills = new List<Skill>();
            var detectedSkillNames = new HashSet<string>(StringComparer.OrdinalIgnoreCase);

            foreach (var skillName in _technicalSkills)
            {
                // Use regex to find whole words only
                var pattern = $@"\b{Regex.Escape(skillName)}\b";
                var matches = Regex.Matches(text, pattern, RegexOptions.IgnoreCase);

                if (matches.Count > 0 && !detectedSkillNames.Contains(skillName))
                {
                    detectedSkillNames.Add(skillName);

                    var skill = new Skill
                    {
                        Id = Guid.NewGuid(),
                        Name = skillName,
                        Category = CategorizeSkill(skillName),
                        Frequency = matches.Count,
                        ConfidenceLevel = CalculateSkillConfidence(matches.Count),
                        IsInDemand = _inDemandSkills.Contains(skillName)
                    };

                    skills.Add(skill);
                }
            }

            // Sort by importance - in-demand skills first, then by confidence
            return skills.OrderByDescending(s => s.IsInDemand)
                        .ThenByDescending(s => s.ConfidenceLevel)
                        .ToList();
        }

        // Group skills into categories
        private string CategorizeSkill(string skillName)
        {
            var cloudSkills = new[] { "Azure", "AWS", "GCP", "Cloud" };
            var devOpsSkills = new[] { "Docker", "Kubernetes", "CI/CD", "DevOps", "Jenkins", "Terraform", "Ansible" };
            var programmingLanguages = new[] { "C#", "Java", "Python", "JavaScript", "TypeScript" };
            var frameworks = new[] { "React", "Angular", "Vue", "ASP.NET", ".NET", "Node.js" };
            var databases = new[] { "SQL", "MongoDB", "PostgreSQL", "MySQL" };

            if (cloudSkills.Contains(skillName, StringComparer.OrdinalIgnoreCase))
                return "Cloud Computing";
            if (devOpsSkills.Contains(skillName, StringComparer.OrdinalIgnoreCase))
                return "DevOps";
            if (programmingLanguages.Contains(skillName, StringComparer.OrdinalIgnoreCase))
                return "Programming Language";
            if (frameworks.Contains(skillName, StringComparer.OrdinalIgnoreCase))
                return "Framework";
            if (databases.Contains(skillName, StringComparer.OrdinalIgnoreCase))
                return "Database";

            return "Other";
        }

        // More mentions = higher confidence that they actually know it
        private int CalculateSkillConfidence(int frequency)
        {
            if (frequency >= 5) return 95;
            if (frequency >= 3) return 85;
            if (frequency >= 2) return 75;
            return 60;
        }

        // Generate a summary of what's good about the resume
        private string GenerateStrengthsSummary(Analysis analysis, string text)
        {
            var strengths = new List<string>();

            if (analysis.AtsScore >= 80)
                strengths.Add("Excellent ATS compatibility with clean, parseable formatting");
            
            if (analysis.CompletenessScore >= 85)
                strengths.Add("Comprehensive resume with all essential sections present");
            
            if (analysis.DetectedSkills.Count >= 10)
                strengths.Add($"Strong technical profile with {analysis.DetectedSkills.Count} identified skills");
            
            if (analysis.DetectedSkills.Count(s => s.IsInDemand) >= 3)
                strengths.Add("Features several in-demand skills relevant to current job market");
            
            if (analysis.KeywordScore >= 75)
                strengths.Add("Well-optimized with relevant keywords and action verbs");

            if (strengths.Count == 0)
                strengths.Add("Resume shows potential with room for optimization");

            return string.Join(". ", strengths) + ".";
        }

        // Generate a summary of what needs work
        private string GenerateWeaknessesSummary(Analysis analysis, string text)
        {
            var weaknesses = new List<string>();

            if (analysis.AtsScore < 60)
                weaknesses.Add("ATS compatibility issues detected - formatting may not parse correctly");
            
            if (analysis.CompletenessScore < 70)
                weaknesses.Add("Missing some important resume sections");
            
            if (analysis.DetectedSkills.Count < 5)
                weaknesses.Add("Limited technical skills mentioned - consider adding more");
            
            if (analysis.KeywordScore < 60)
                weaknesses.Add("Lacking relevant keywords and industry terminology");
            
            if (analysis.FormattingScore < 60)
                weaknesses.Add("Formatting could be improved for better readability");

            if (weaknesses.Count == 0)
                weaknesses.Add("Minor improvements possible in overall optimization");

            return string.Join(". ", weaknesses) + ".";
        }

        /// <summary>
        /// Generates prioritized recommendations for resume improvement
        /// Provides actionable advice based on analysis scores
        /// </summary>
        private List<Recommendation> GenerateRecommendations(Analysis analysis, string text)
        {
            var recommendations = new List<Recommendation>();

            // ATS recommendations
            if (analysis.AtsScore < 80)
            {
                recommendations.Add(new Recommendation
                {
                    Id = Guid.NewGuid(),
                    Title = "Improve ATS Compatibility",
                    Description = "Your resume may have formatting issues that could prevent ATS systems from parsing it correctly. This could result in your application being filtered out before a human sees it.",
                    Category = "ATS Optimization",
                    Priority = "High",
                    ImpactScore = 25,
                    ActionSteps = "1. Remove tables, columns, and complex layouts\n2. Use standard section headers (Experience, Education, Skills)\n3. Avoid headers/footers with page numbers\n4. Stick to standard fonts (Arial, Calibri, Times New Roman)\n5. Save as .docx or .pdf format",
                    Example = "Instead of: [Complex table layout]\nUse: Simple left-aligned text with clear headings"
                });
            }

            // Completeness recommendations
            if (analysis.CompletenessScore < 85)
            {
                recommendations.Add(new Recommendation
                {
                    Id = Guid.NewGuid(),
                    Title = "Add Missing Resume Sections",
                    Description = "Your resume is missing some important sections that recruiters expect to see. Complete resumes perform better in both ATS systems and human review.",
                    Category = "Content",
                    Priority = "High",
                    ImpactScore = 20,
                    ActionSteps = "Ensure your resume includes:\n1. Contact Information (email, phone, LinkedIn)\n2. Professional Summary (2-3 sentences)\n3. Work Experience (with dates and achievements)\n4. Education (degrees, institutions, graduation dates)\n5. Skills (technical and soft skills)\n6. Optional: Certifications, Projects, Volunteer Work",
                    Example = "PROFESSIONAL SUMMARY\nResults-driven software developer with 3+ years of experience in cloud technologies..."
                });
            }

            // Keyword recommendations
            if (analysis.KeywordScore < 70)
            {
                recommendations.Add(new Recommendation
                {
                    Id = Guid.NewGuid(),
                    Title = "Enhance Keyword Optimization",
                    Description = "Your resume lacks sufficient industry-relevant keywords. Adding targeted keywords increases visibility in ATS searches and shows alignment with job requirements.",
                    Category = "Keywords",
                    Priority = "Medium",
                    ImpactScore = 18,
                    ActionSteps = "1. Review job descriptions for target roles\n2. Identify common technical skills and tools\n3. Incorporate these keywords naturally throughout your resume\n4. Include both acronyms and full terms (e.g., 'CI/CD' and 'Continuous Integration')\n5. Use action verbs: developed, implemented, optimized, automated",
                    Example = "Instead of: 'Worked on cloud projects'\nUse: 'Developed and deployed scalable microservices on Azure using Docker and Kubernetes, implementing CI/CD pipelines'"
                });
            }

            // Skill quantity recommendation
            if (analysis.DetectedSkills.Count < 8)
            {
                recommendations.Add(new Recommendation
                {
                    Id = Guid.NewGuid(),
                    Title = "Expand Skills Section",
                    Description = "Your resume mentions relatively few technical skills. Modern job seekers typically showcase 10-15 relevant skills to demonstrate breadth of expertise.",
                    Category = "Content",
                    Priority = "Medium",
                    ImpactScore = 15,
                    ActionSteps = "1. Create a dedicated 'Technical Skills' section\n2. List programming languages you know\n3. Include frameworks and libraries\n4. Mention tools and platforms (Git, Azure, Docker, etc.)\n5. Add relevant soft skills\n6. Group skills by category for easy scanning",
                    Example = "TECHNICAL SKILLS\nLanguages: C#, Python, JavaScript, SQL\nFrameworks: .NET, React, Node.js\nCloud: Azure, AWS\nDevOps: Docker, Kubernetes, CI/CD, Git"
                });
            }

            // Formatting recommendations
            if (analysis.FormattingScore < 70)
            {
                recommendations.Add(new Recommendation
                {
                    Id = Guid.NewGuid(),
                    Title = "Improve Formatting and Structure",
                    Description = "Better formatting makes your resume easier to scan and more professional. Recruiters spend an average of 6-7 seconds on initial resume review.",
                    Category = "Formatting",
                    Priority = "Medium",
                    ImpactScore = 12,
                    ActionSteps = "1. Use clear section headers in larger/bold font\n2. Add bullet points for achievements and responsibilities\n3. Include white space between sections\n4. Keep consistent date formatting\n5. Align dates to the right for clean look\n6. Limit resume to 1-2 pages\n7. Use 11-12pt font size for body text",
                    Example = "SOFTWARE DEVELOPER | TechCorp Inc. | June 2021 - Present\nâ€¢ Developed REST APIs using .NET Core, improving response time by 40%\nâ€¢ Implemented automated testing, reducing bugs by 25%"
                });
            }

            // Cloud/DevOps specific recommendation for your career goals
            var hasCloudSkills = analysis.DetectedSkills.Any(s => 
                s.Category == "Cloud Computing" || s.Category == "DevOps");
            
            if (!hasCloudSkills || analysis.DetectedSkills.Count(s => s.IsInDemand) < 3)
            {
                recommendations.Add(new Recommendation
                {
                    Id = Guid.NewGuid(),
                    Title = "Highlight Cloud and DevOps Experience",
                    Description = "For DevOps and Cloud Computing roles, emphasize experience with cloud platforms, automation, and modern development practices. These skills are highly sought after.",
                    Category = "Content",
                    Priority = "High",
                    ImpactScore = 22,
                    ActionSteps = "1. Create a 'Cloud & DevOps' skills section\n2. Mention specific Azure services used (App Service, Functions, DevOps, etc.)\n3. Highlight infrastructure as code experience (Terraform, ARM templates)\n4. Showcase CI/CD pipeline implementations\n5. Include containerization and orchestration skills\n6. Mention monitoring and logging tools",
                    Example = "â€¢ Architected and deployed microservices on Azure Kubernetes Service (AKS)\nâ€¢ Implemented CI/CD pipelines using Azure DevOps and GitHub Actions\nâ€¢ Automated infrastructure provisioning with Terraform\nâ€¢ Reduced deployment time by 60% through DevOps practices"
                });
            }

            // Sort recommendations by priority and impact
            return recommendations
                .OrderByDescending(r => r.Priority == "High" ? 3 : r.Priority == "Medium" ? 2 : 1)
                .ThenByDescending(r => r.ImpactScore)
                .ToList();
        }
    }
}
